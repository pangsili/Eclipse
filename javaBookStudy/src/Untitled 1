자바 

주요 특징 2가지 - 가상 머신에서 동작한다. / 객체 지향 언어이다.

가상 머신 : 소프트웨어로 제공되어 OS 상에서 가상으로 동작하는 머신을 말한다. - 자바가 동작하는 가상 머신을 JVM(Java Virtual Machine 자바 가상 머신) 이라고 부른다.

객체 지향 : 현실 세계의 사물에 비유해 프로그램을 작성하는 사고방식으로 대규모 소프트웨어 개발에서 생기는 불편함을 해결하기 위해 고안되었다.

	객체 지향을 도입하면 기능 변경이나 재사용이 쉬워져 개발 효율이 올라간다. 그래서 요즘 프로그래밍 언어에는 대부분 객체 지향 사고방식이 들어 있다.

OS 에는 윈도우, 리눅스, macOS 등 다양한 종류가 있고, 각 OS 가 제공하는 기능과 사용하는 방법도 다들 다르다.

예전에는 이 차이를 프로그램 쪽에서 흡수했어야 했다. 즉, OS 별로 프로그램을 따로 준비해야 했던 것이다. - 시간도 오래 걸리고 기업 측면에서는 하나하나 만드는 부담이 지게 되는 것이다.

이 문제를 자바에서는 JVM 을 통해서 OS 의 차이를 프로그램이 아니라 JVM 에서 흡수함으로써 개발자는 OS 의 차이를 의식하지 않고 업무 애플리케이션을 작성할 수 있게 되었다.

자바로 만들어진 애플리케이션은 하나 이상의 클래스 파일로 구성된다.

"클래스 파일" 이란 컴퓨터가 처리하기 쉬운 형식으로 기술된 파일로, 인간이 이해할 수 있는 형태로 기술된 소스 파일을 바탕으로 만들어진다.

클래스 파일처럼 컴퓨터가 처리할 수 있는 형식의 코드를 가리켜 "바이트 코드" 라고 부른다.

소스 파일을 클래스 파일로 만들기 위해서는 "컴파일" 과정을 거쳐야 한다.

컴파일이란, 인간이 이해할 수 있는 소스 파일을 컴퓨터가 처리할 수 있는 바이트 코드로 번역하는 것이다.

이러한 번역 작업을 하는 애플리케이션이 "자바 컴파일러" 이다.

자바 애플리케이션은 대부분 "통합 개발 환경 (IDE)" 에서 만들어진다.

통합 개발 환경이란 애플리케이션 개발을 지원하는 환경으로, 지금 공부에서는 많은 현장에서 사용하는 "이클립스 (Eclipse)" 를 선택하였다.

자바 설치 후 설정 확인

명령 프롬프트에서 java -version 명령을 입력하고 실행하면 자바 버전을 확인할 수 있다. (현재 나는 1.8)

자바 애플리케이션을 작성할 때는 다른 자바 애플리케이션에 똑같은 이름의 클래스 파일이 있을 가능성이 크므로 서로의 클래스 파일을 구별하는 식별자로 패키지명을 사용한다.

패키지를 만들면 이클립스 시작할 때 지정한 워크스페이스에 있는 프로젝트의 src 폴더 안에 jp/co/bbreak/sokusen/_1 등 이렇게 폴더가 하나씩 계층적으로 나누어져 생성되어 있다.

이로써 패키지명은 루트가 되는 폴더에서 시작하는 폴더 계층을 나타냄을 알 수 있다.

이클립스에서는 자바 클래스라고 하지만, 실제로는 .class 클래스 파일을 만들기 위한 .java 소스 파일이 만들어진다.

이곳에서 말하는 클래스란 소스 파일에서 class 로 선언한 것을 가리킨다.

확장자가 .class 인 파일도 클래스로 부르기 때문에 혼동하기 쉽지만, 여기서는 소스 파일에서 clas 로 선언한 것을 "클래스" 라 하고, 실제로 만들어진 확장자가 .class 인 파일은 "클래스 파일" 이라고 구별한다.

클래스 맨 윗줄은 클래스가 어느 패키지에 소속 되어 있는지를 나타낸다.

자바 애플리케이션은 자바 클래스에 있는 main 메서드를 시작점으로 실행된다. 

자바 형식

자바 소스 코드는 주로 다음의 3가지 요소로 기술한다.

- 자바에서 지정한 키워드

- 소스 코드 작성자가 직접 붙인 이름(식별자)

- 뭔가 역할을 가진 기호(연산자 등)

자바에서 지정한 키워드를 "예약어" 라고 부른다.

예약어란, 컴파일 시 프로그램을 분석하는 데 사용되는 단어 또는 true, false, null 등 이미 그 단어 자체에 프로그램상의 의미가 있는 값을 나타낸다.

그러므로 예약어와 똑같은 단어는 식별자로 지정할 수 없다.

"식별자" 란 소스 코드를 기술하는 사람이 붙인 이름을 말한다. - 처리를 시루할 때, 이들이 각각 무엇을 나타내는지 그리고 무엇을 하는지 등 그 의미를 사람이 읽고 이해할 수 있게 프로그램 언어에서 허용된 문자로 붙인 이름이다.

또한 계산과 조건 판정 등에 사용하는 기호를 "연산자" 라고 한다.

따라서 기호는 _ 와 $ 를 제외하고는 식별자로 사용할 수 없다.

키워드, 식별자, 연산자를 자바 문법에 따라 서로 연결해 자바의 "문" 을 만든고, 다시 몇 개의 문을 모아서 "블록" 을 만들고 자바 애플리케이션을 만든다.

"문" 에서는 단어나 기호를 조합해 값을 설정하거나 처리를 호출한다. 그리고 문의 맨 끝에는 세미콜론(;) 을 붙인다.

"블록" 은 복수의 문을 묶어서 순서대로 배치함으로써 하나의 큰 처리 흐름이나 문의 영향 볌위를 나타낸다.

{} 로 에워싼 범위가 블록이다.

예시

		사람 {
		
			이름은 'OO';
			취미는 'XX';
			
			자기소개를 한다 {
			
				인사를 한다;
				이름을 말한다;
				취미를 말한다;
			}
			
			인사를 한다 {
			
				인사말은 '안녕하세요';
				인사말을 한다;
			}
		}

블록 내의 문에는 각각 유효 범위가 설정되어 있다.

블록 내에서는 같은 계층 혹은 블록 밖에 있는 문이나 블록을 참조할 수 있지만, 블록 밖에서는 블록 내에 있는 문을 참조할 수 없다.

소스 코드 구조

자바의 소스 코드는 단순하게 보면 다음과 같은 구조로 기술한다.

- 소스 코드가 무엇을 나타내는지 선언

- 선언 블록 내에 값을 설정하기 위한 변수 정의

- 선언 블록 내에 변숫값을 사용한 처리를 기술

변수란 프로그램 안에서 값을 전달하기 위한 상자이다. 프로그램 안에서 계산을 하거나 가공한 값을 임시로 보관하는 데 사용한다.

예시로 만든 사람을 예로 들면

구성 요소						예제에서의 대상

소스 코드가 나타내는 것 선언		사람
변수(값을 가진 것) 선언			이름, 취미, 인사말
처리를 기술					자기소개를 한다, 인사를 한다

자바에서는 소스 코드로 나타내고자 하는 것이 무엇인지 블록으로 감싸서 선언한다.

구체적으로는 클래스 / 인터페이스 / 열거형 등을 선언한다.

클래스는 다음처럼 선언한다.

class 클래스명 {

	... 클래스 내용 ...
}

이렇게 선언된 class 블록 아래에 클래스가 사용할 변수나 처리를 기술함으로써 클래스의 성질과 동작을 연결시킬 수 있다.

사람 예시에서는 '사람' 이라는 클래스에는 '이름' 과 '취미' 라느 ㄴ변수가 있었고, 처리로는 '자기소개를 한다', '인사를 한다' 라는 기능이 있었다.

자바 애플리케이션은 변수로 값을 유지한다.

변수에 값을 설정하려면 "=" 기호를 사용하며, = 기호 왼쪽에는 변수명을, 오른쪽에는 설정할 값을 쓴다.

이것을 "대입" (혹은 "할당") 이라고 한다.

변수를 선언하는 구문

	변수형 변수명 = 값;
	
변수형이란 그 변수에 어떤 값을 담을 수 있는지 나타내는 정보로, 수치, 문자, 클래스 등을 지정할 수 있다.

변수에는 선언한 자료형의 값만 설정할 수 있다.

변수에 값을 설정한 다음에는 변수를 지정해서 값을 가져올 수 있다.

다음과 같이 값을 대입하지 않고 변수를 선언할 수도 있다.

	변수형 변수명;
	
이 경우 변수형의 기본값 (아무것도 설정하지 않으면 자동으로 설정되는 정해진 값)	이 대입된다.

좀 전에 만든 클래스를 예로 들면 '이름' 과 '취미' 에는 문자열을 설정하므로 자바의 문자열 클래스인 String 으로 형을 지정한다.

문자열 값을 나타내려면 값의 앞뒤를 큰따옴표(") 로 에워싸야 한다.

위 설명을 바탕으로 "이름" 변수를 다음과 같이 선언할 수 있다.

	String 이름 = "OO";
	
변수형은 처음에 변수명을 선언할 때만 지정하면 되고, 값을 변경할 때는 다음처럼 쓸 수 있다.

	변수명 = 값;

이전의 예시의 문자열 변수들을 자바 문법에 맞게 다시 쓰면 다음과 같이 된다.

		사람 {
		
			String 이름 = "OO";
			String 취미 = "XX";
			
			자기소개를 한다 {
			
				인사를 한다;
				이름을 말한다;
				취미를 말한다;
			}
			
			인사를 한다 {
			
				String 인사말 = "안녕하세요";
				인사말을 한다;
			}
		}
		
예제에서 '이름' 과 '취미' 는 클래스의 상태를 나타내는 변수이다.

이처럼 클래스의 블록에서 직접 선언한 변수를 필드 (field) 라고 한다.

자바 애플리케이션에는 여러 "처리" 가 포함된다.

"처리" 에는 1 + 1 처럼 처리를 나타내는 기호를 사용해 표현하는 식(expression) 과 몇 개의 처리를 묶은 메서드(method) 가 있다.

메서드는 처리를 기술한 문을 차례로 써서 블록으로 묶은 것으로, 다음처럼 표현한다.

	반환형 메서드명(인수형 인수명) {
	
		... 메서드 내용 ...
	}
	
반환형은 수치나 문자열, 클래스 등 메서드의 실행 결과로서 반환하는 값의 자료형을 지정한다.

만약 메서드가 실행 결과를 반환할 필요가 없을 때는 void 키워드를 지정한다.

"인수" 는 메서드에 값을 전달하기 위해 사용하느 변수로, 메서드의 () 안에 정의한다.

인수는 하나도 지정하지 않을 수도 이고, 여러 개를 지정할 수도 있다.

인수가 없을 때는 메서드 이름 뒤에 () 만 쓰고, 여러 개를 지정할 때는 인수형과 인수명을 한 세트로 해서 쉼표(,) 로 구별한다.

처리 결과를 반환해야 할 때는 처리 마지막에 return 문을 쓴다.

	반환형 메서드명(인수형 인수명) {
	
		... 임의의 처리 ..
		return 처리_결과;
	}

메서드가 처리 결과를 반환할 필요가 없다면 return 문도 쓸 필요가 없다. 이때는 반환형으로 void를 지정한다.

또한, 도중에 처리를 끝내고 싶을 때 끝내고 싶은 부분에 return; 이라고 처리 결과 없이 return 문을 써서 메서드를 강제로 종료시킬 수 있다.

이전 예제를 메서드 형식으로 표시해본다.

	class 사람 {
	
		String 이름 = "OO";
		String 취미 = "XX";
		
		void 자기소개를 한다() {
		
			인사를 한다;
			System.out.println(이름);
			System.out.println(취미);
		}
		
		void 인사를 한다() {
		
			String 인사말 = "안녕하세요";
			System.out.println(인사말);
		}
	}